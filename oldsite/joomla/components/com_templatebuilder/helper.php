<?php
/**
 * @version		1.0.0 Templatebuilder $
 * @package		Templatebuilder
 * @copyright	Copyright Â© 2012 - All rights reserved.
 * @license		GNU/GPL
 * @author		Nate Mason
 * @author mail	nate@fargodesignco.com
 *
 *
 * @MVC architecture generated by MVC generator tool at http://www.alphaplug.com
 */

// no direct access
defined('_JEXEC') or die('Restricted access');

// Your custom code here
 
/**
 * HelloWorld component helper.
 */
abstract class TemplatebuilderHelper
{
		
		
		
		
		
		function getParams(){
			$item = JSite::getMenu()->getActive();
			$params = $item->params;
			return $params;
		}
		
		function getCompParams(){
			$params = &JComponentHelper::getParams( 'com_templatebuilder' );
			return $params;
		}
		
		function getCategory($category){
			jimport( 'joomla.application.categories' );
			$cat = new JCategories(array("extension"=>"com_templatebuilder","table"=>"#__categories"));
			$cat = $cat->get($category);
			return $cat;
		}
}

function trim_value(&$value) 
{ 
    $value = trim($value); 
}

class TemplateBuilderTemplate{
	function loadData(){
		$this->positions = explode(",",$this->positions);
		$this->layouts = explode(",",$this->layouts);
		$this->tmp_name = strtolower(implode("",explode(" ",$this->title)));
		array_walk($this->positions,"trim_value");
		array_walk($this->layouts,"trim_value");
	}
	
	/// FUNCTION FOR MAKING BLANK FILES
	private function defaultFilenames(){
		if(empty($this->tmp_name)){
			$this->loadData();
		}
		
		
		$output = array();
		$output[''] = "index.html";
		$output['css'][] = "template.css";
		$output['css'][] = "index.html";
		$output['css']['fonts'][] = "index.html";
		$output['css']['images'][] = "index.html";
		$output['css']['layouts'][] = "index.html";
		foreach($this->layouts as $l){
			$output['css']['layouts'][] = strtolower(implode("",explode(" ",$l))).".css";
		}
		
		$output['html'][] = "index.html";
		$output['images'][] = "index.html";
		$output['js'][] = "index.html";
		$output['language'][] = "index.html";
		$output['layouts'][] = "index.html";
		foreach($this->layouts as $l){
			$output['layouts'][] = strtolower(implode("",explode(" ",$l))).".php";
		}
		return $output;
	}
	
	function archive(){
		jimport( 'joomla.filesystem.file' );
		jimport( 'joomla.filesystem.folder' );
        jimport( 'joomla.filesystem.archive' );
		
		
		$folder_path = $this->tmpdir;
		$new_folder_name_final = $folder_path . '.zip';
		
		ini_set("max_execution_time", 300);
	
		$zip = new ZipArchive();
		
		if(JFile::exists($new_folder_name_final)){
			JFile::delete($new_folder_name_final);
		}

		
		
	
		if ($zip->open($new_folder_name_final, ZIPARCHIVE::CREATE) !== TRUE) {
			return false;
		}
	
		$iterator = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($folder_path));
	
		foreach ($iterator as $key=>$value) {
			$key = str_replace('\\', '/', $key);
			if (!is_dir($key))
				if(!$zip->addFile(realpath($key), substr($key, strlen($folder_path) - strlen(basename($folder_path))))) return false;
			}
		$zip->close();
		
		return true;
	}
	
	
	
	
	
	
	function archive_old(){
		jimport( 'joomla.filesystem.file' );
		jimport( 'joomla.filesystem.folder' );
        jimport( 'joomla.filesystem.archive' );
        if(!isset($this->tmpdir)){
			die("Folder Not Set");
		}else if(!JFolder::exists($this->tmpdir)){
			die("Folder Does Not Exist");
		}
		
		
        $filesArray = array();
        $archivename = $this->tmpdir.".zip";
		if(JFile::exists($archivename)){
			JFile::delete($archivename);
		}

        $files = JFolder::files($this->tmpdir, '.', true, true);

        foreach($files as $file)
        {
            $data = JFile::read($file);
            $filesArray[] = array('name' => $file, 'data' => $data);
        }

        $zip =& JArchive::getAdapter('zip');
        return $zip->create($archivename, $filesArray);
	}
	
	
	
	function createStructure($fonts=array()){
		jimport( 'joomla.filesystem.folder' );
		jimport( 'joomla.filesystem.file' );
		
		$this->tmpdir = JPATH_ROOT.DS."tmp".DS.$this->tmpName(JRequest::getVar("desired_name"));
		
		if(JFolder::exists($this->tmpdir)){
			JFolder::delete($this->tmpdir);
		}
		JFolder::create($this->tmpdir);
		
		
		$filenames = $this->defaultFilenames();
		$path = $this->tmpdir;
		
		if(!JFolder::exists($path)){
			JFolder::create($path);
		}
		
		
		
		$paths = self::listArrayRecursive($filenames);
		$buffer = "<html><head></head><body></body></html>";
		
		foreach($paths as $p){
			JFile::write($path.DS.$p,$buffer);
		}
		
		$fontcss = "";
		foreach($fonts as $f){
			if(JFolder::exists(JPATH_COMPONENT.DS."assets".DS."fonts".DS.$f)){
				$res = JFolder::copy(JPATH_COMPONENT.DS."assets".DS."fonts".DS.$f,$path.DS."css".DS."fonts".DS.$f);
				if($res){
					$fontcss .="@import url(\"fonts/".$f."/stylesheet.css\");  \r\n";
				}
			}
		}
		
		JFile::write($path.DS."css".DS."fonts.css",$fontcss);
		
		
		$xml = $this->outputXML($filenames);
		
		JFile::write($path.DS."templateDetails.xml",$xml);
		
		
		if(JFile::exists(JPATH_COMPONENT.DS."assets".DS."samples".DS."sampleindex.php")){
			
			$res = JFIle::copy(JPATH_COMPONENT.DS."assets".DS."samples".DS."sampleindex.php",$path.DS."index.php");
			
			return $res;
		}
		
		
		return false;
	}
	
	
	function tmpName($name = false){
		if(empty($this->tmp_name)){
			$this->loadData();
		}
		
		if($name){
			$this->tmp_name = strtolower(implode("",explode(" ",$name)));
		}
		
		return $this->tmp_name;
	}
	
	
	
	function outputXML($files){
		if(empty($this->tmp_name)){
			$this->loadData();
		}
		
		$xml = '<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE install PUBLIC "-//Joomla! 1.6//DTD template 1.0//EN" "http://www.joomla.org/xml/dtd/1.6/template-install.dtd">
<extension version="1.6" type="template" client="site">';

		$xml .= "\r\n<name>".JRequest::getVar("desired_name")."</name>"; 
		$xml .= "\r\n<creationDate>".date("m/j/Y")."</creationDate>"; 
		$xml .= "\r\n<author>".JRequest::getVar("author_name")."</author>"; 
		$xml .= "\r\n<authorEmail>".JRequest::getVar("author_email")."</authorEmail>"; 
		$xml .= "\r\n<authorUrl>".JRequest::getVar("author_url")."</authorUrl>"; 
	
		
	
	$xml .= '
	<copyright>Copyright (C) '.date("Y").' Fargod Design Co., Inc. All rights reserved.</copyright>
	<license>GNU General Public License version 2 or later; see LICENSE.txt</license>
	<version>1.6.0</version>
	<description>'.JRequest::getVar("desired_name").' Template generated at Fargo Apps using the Fargo Template Generator</description>';
	
	
	$xml .= '
	<files>';
	
	foreach($files as $k=>$v){
		if(is_array($v)){
			$xml.='
			<folder>'.$k.'</folder>';
		}else{
			$xml.="
			<filename>".$v."</filename>";
		}
	}
	
	$xml.="
		<filename>templateDetails.xml</filename>
		<filename>index.php</filename>
	</files>
	";
	
	$xml .= "
	<positions>";
	
	foreach($this->positions as $p){
		$xml.="
		<position>".$p."</position>";
	}
	$xml .= '
	</positions>
	<config>
		<fields name="params">
			<fieldset name="advanced">
				<field name="templateStyle" type="list" default="1" label="Template Style" description="This will control what style loads for the content" filter="word">';
				
				foreach($this->layouts as $l){
					$xml.='
					<option value="'.strtolower(implode("",explode(" ",$l))).'">'.$l.'</option>';
				}
	$xml .='
				</field>											
			</fieldset>
		</fields>
	</config>

</extension>
	';
		
		
		return $xml;
		
	}
	
	
	function listArrayRecursive($someArray) {
		$output = array();
		$iterator = new RecursiveIteratorIterator(new RecursiveArrayIterator($someArray), RecursiveIteratorIterator::SELF_FIRST);
		foreach ($iterator as $k => $v) {
			$indent = str_repeat('&nbsp;', 10 * $iterator->getDepth());
			// Not at end: show key only
			if ($iterator->hasChildren()) {
				//echo "$indent$k :<br>";
			// At end: show key, value and path
			} else {
				for ($p = array(), $i = 0, $z = $iterator->getDepth(); $i <= $z; $i++) {
					$p[] = $iterator->getSubIterator($i)->key();
				}
				$path = implode('/', $p);
				$output[] = str_replace("/".$k,"",$path).DS."$v";
				//echo "$indent$k : $v : path -> $path<br>";
			}
		}
		
		return $output;
	}
	
	
	
	
	
	
}

?>